---
id: torrentio
name: Torrentio
description: "Torrentio Indexer for Real-Debrid Cached Hashes"
language: en-US
type: public
encoding: UTF-8
followredirect: false
testlinktorrent: false
requestDelay: 2
links:
  - https://torrentio.strem.fun/

caps:
  categories:
    Movies: Movies
    TV: TV

  modes:
    search: [q]
    tv-search: [q, season, ep, imdbid]
    movie-search: [q, imdbid]
  allowrawsearch: false

settings:
  - name: opt_label
    type: info
    label: Torrentio Options are required! This field can not be empty.
  - name: default_opts
    type: text
    label: Torrentio Options
    default: "providers=yts,eztv,rarbg,1337x,thepiratebay,kickasstorrents,torrentgalaxy,magnetdl,horriblesubs,nyaasi|sort=qualitysize|qualityfilter=480p,other,scr,cam,unknown|limit=10"

search:
  paths:
    - path: "{{ if eq .Query.Type 'movie' }}{{ .Config.default_opts }}/stream/movie/{{ .Query.IMDBID }}.json{{ else }}providers=rarbg,1337x|sort=size|qualityfilter=brremux,hdrall,dolbyvision,4k,720p,480p,other,scr,cam,unknown|limit=1/stream/movie/tt0012189.json{{ end }}"
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      categories: [Movies]
    - path: "{{ if eq .Query.Type 'tvsearch' }}{{ .Config.default_opts }}/stream/series/{{ .Query.IMDBID }}:{{ .Query.Season }}:{{ .Query.Ep }}.json{{ else }}{{ if .Query.IMDBID }}stream/search/{{ .Query.IMDBID }}:1:1.json{{ end }}"
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      categories: [TV]
    # - path: "{{ if eq .Query.Type \"tvsearch\" and .Query.Season and .Query.Ep }}{{ .Config.default_opts }}/stream/series/{{ .Query.IMDBID }}:{{ .Query.Season }}:{{ .Query.Ep }}.json{{ else }}{{ .Config.default_opts }}/stream/series/{{ .Query.IMDBID }}:1:1.json{{ end }}"
    #   method: get
    #   response:
    #     type: json
    #     noResultsMessage: '"streams": []'
    #   categories: [TV]



  rows:
    selector: streams
    missingAttributeEqualsNoResults: true

  fields:
    title:
      selector: title
      filters:
        - name: split
          args: ["\n", "0"]
    category_is_tv_show:
      text: "{{ .Result.title }}"
      filters:
        - name: regexp
          args: "\\b(S\\d+(?:E\\d+)?)\\b"
    category:
      text: "{{ if .Result.category_is_tv_show }}TV{{ else }}Movies{{ end }}"
    infohash:
      selector: infoHash
    size:
      selector: title
      filters:
        - name: regexp
          args: "\\b(\\d+(?:\\.\\d+)? [MG]B)\\b"
    seeders:
      selector: title
      filters:
        - name: regexp
          args: "(\\uD83D\\uDC64 \\d+)"
# engine n/a
