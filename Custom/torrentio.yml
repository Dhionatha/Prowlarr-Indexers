---
id: torrentio
name: Torrentio
description: "Torrentio Indexer for Real-Debrid Cached Hashes"
language: en-US
type: public
encoding: UTF-8
followredirect: false
testlinktorrent: false
requestDelay: 2
links:
    - https://torrentio.strem.fun/

caps:
  categories:
    Movies: Movies
    TV: TV

  modes:
    search: [q]
    tv-search: [q, season, ep, imdbid]
    movie-search: [q, imdbid]
  allowrawsearch: false

settings:
  - name: opt_label
    type: info
    label: Torrentio Options are required! This field can not be empty.
  - name: default_opts
    type: text
    label: Torrentio Options
    default: "providers=yts,eztv,rarbg,1337x,thepiratebay,kickasstorrents,torrentgalaxy,magnetdl,horriblesubs,nyaasi|qualityfilter=480p,other,scr,cam,unknown|sort=quality|limit=10"

search:
  paths:
      # [Movie] If the query is a movie, then use the imdbid, else use the default imdbid.
    - path: "{{ if eq .Query.Type \"movie\" }}{{ .Config.default_opts }}/stream/movie/{{ .Query.IMDBID }}.json{{ else }}stream/search/tt0137523.json{{ end }}"
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      # [TV Show] If the query is a tv show, then use the imdb to include the rest of the series, else use the default imdbid.
    - path: "{{ if eq .Query.Type \"tvsearch\" }}{{ .Config.default_opts }}/stream/series/{{ .Query.IMDBID }}.json{{ else }}stream/search/tt0137523.json{{ end }}"
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      # [TV Show] If the query is an imdbid with season and episode, then use the imdb along with the season and episode number, else use the default imdbid.
    - path: "{{ if eq .Query.Type \"tvsearch\" }}{{ .Config.default_opts }}/stream/series/{{ .Query.IMDBID }}:{{ .Query.Season }}:{{ .Query.Ep }}.json{{ else }}stream/search/tt0137523.json{{ end }}"
      method: get
      response:
        type: json
        noResultsMessage: '"streams": []'
      # [DEBUG]
    # - path: "DEBUG::{{ .Query.Type }}/{{ .Query.Q }}/{{ .Query.Series }}/{{ .Query.Movie }}"
    #   method: get
    #   response:
    #     type: json
    #     noResultsMessage: '"streams": []'

  rows:
    selector: streams
    missingAttributeEqualsNoResults: true

  fields:
    infohash:
      selector: infoHash
    title:
      selector: title
      filters:
        - name: split
          args: ["\n", 0]
    size:
      selector: title
      filters:
        - name: regexp
          args: "(\\d+(\\.?\\d+) GB)"
    seeders:
      selector: title
      filters:
        - name: regexp
          args: "(\\uD83D\\uDC64 \\d+)"
# engine n/a